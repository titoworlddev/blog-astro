---
export interface Props {
	title: string;
	description: string;
	slug: string;
	category: string;
	pubDate: Date;
	image?: {
		src: string;
		width: number;
		height: number;
		format: string;
	};
}

const { title, description, slug, category, pubDate, image } = Astro.props;

// Map category slug to display name
const categoryNames: Record<string, string> = {
	'desarrollo-web': 'Desarrollo Web',
	'bases-de-datos': 'Bases de Datos',
	'servidores': 'Servidores',
	'cloud-computing': 'Cloud Computing',
	'linea-de-comandos': 'LÃ­nea de Comandos',
	'inteligencia-artificial': 'Inteligencia Artificial'
};

const categoryDisplayName = categoryNames[category] || category;

// Format the publication date
const formattedDate = pubDate.toLocaleDateString('es-ES', {
	year: 'numeric',
	month: 'long',
	day: 'numeric'
});
---

<article class="post-card">
	<div class="post-image">
		{image ? (
			<img src={image.src} alt={title} />
		) : (
			<div class="placeholder-image">
				<svg width="80" height="80" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
					<path d="M14.828 14.828L21 21M16.5 10.5C16.5 13.8137 13.8137 16.5 10.5 16.5C7.18629 16.5 4.5 13.8137 4.5 10.5C4.5 7.18629 7.18629 4.5 10.5 4.5C13.8137 4.5 16.5 7.18629 16.5 10.5Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				</svg>
			</div>
		)}
	</div>
	
	<div class="post-content">
		<div class="post-meta">
			<div class="post-category">
				<a href={`/categoria/${category}`} class="category-tag">
					{categoryDisplayName}
				</a>
			</div>
			<div class="post-date">
				{formattedDate}
			</div>
		</div>
		<h3 class="post-title">{title}</h3>
		<p class="post-description">{description}</p>
		<a href={slug} class="btn read-more">Read More</a>
	</div>
</article>

<style>
	.post-card {
		background-color: #2a2a2a;
		border-radius: 1rem;
		overflow: hidden;
		transition: transform 0.3s ease, box-shadow 0.3s ease;
		border: 1px solid #333;
	}

	.post-card:hover {
		transform: translateY(-5px);
		box-shadow: 0 10px 30px rgba(79, 209, 199, 0.1);
	}

	.post-image {
		width: 100%;
		height: 200px;
		background: linear-gradient(135deg, #4fd1c7, #6ee7dd);
		display: flex;
		align-items: center;
		justify-content: center;
		position: relative;
		overflow: hidden;
	}

	.post-image img {
		width: 100%;
		height: 100%;
		object-fit: cover;
	}

	.placeholder-image {
		color: rgba(255, 255, 255, 0.8);
		display: flex;
		align-items: center;
		justify-content: center;
	}

	.placeholder-image svg {
		width: 60px;
		height: 60px;
	}

	.post-content {
		padding: 1.5rem;
	}

	.post-meta {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 0.75rem;
		gap: 1rem;
	}

	.post-category {
		flex-shrink: 0;
	}

	.post-date {
		color: #9ca3af;
		font-size: 0.75rem;
		font-weight: 400;
		text-align: right;
		flex-shrink: 0;
		white-space: nowrap;
	}

	.category-tag {
		display: inline-block;
		padding: 0.25rem 0.75rem;
		background-color: rgba(79, 209, 199, 0.1);
		color: #4fd1c7;
		border: 1px solid rgba(79, 209, 199, 0.3);
		border-radius: 1rem;
		font-size: 0.75rem;
		font-weight: 500;
		text-decoration: none;
		transition: all 0.3s ease;
		text-transform: uppercase;
		letter-spacing: 0.5px;
	}

	.category-tag:hover {
		background-color: #4fd1c7;
		color: #1a1a1a;
		transform: translateY(-1px);
		box-shadow: 0 2px 8px rgba(79, 209, 199, 0.3);
	}

	.post-title {
		color: #ffffff;
		font-size: 1.25rem;
		font-weight: 600;
		margin-bottom: 0.75rem;
		line-height: 1.3;
	}

	.post-description {
		color: #cccccc;
		font-size: 0.95rem;
		line-height: 1.5;
		margin-bottom: 1.5rem;
	}

	.read-more {
		display: inline-block;
		padding: 0.75rem 1.5rem;
		background-color: #4fd1c7;
		color: #1a1a1a;
		border-radius: 0.5rem;
		font-weight: 500;
		text-decoration: none;
		transition: all 0.3s ease;
		font-size: 0.9rem;
	}

	.read-more:hover {
		background-color: #6ee7dd;
		transform: translateY(-2px);
	}
</style>
